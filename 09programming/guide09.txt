Karen Cudjoe
CS 342
Guide 09

1. Chapter 17

a. B+ Trees — Focus on the Section 17.3 (skipping the material on algorithms).
i. Compare and contrast B-trees and B+-trees.

In a B-tree, every value of the search field appears once at some level in the tree, along with a data pointer. 
In a B+-tree, data pointers are stored only at the leaf nodes of the tree; hence, the structure of leaf nodes differs from the structure of internal nodes. 

ii. Explain what it means for such a tree to be balanced.
A tree is balanced when all its leaf nodes are at the same level.

iii. Compare and contrast tree and data pointers.
A tree pointer is a pointer to another node in the tree
A data pointer is a pointer to the records whose search key field value is equal to the data file block containing that record.


b. Explain the nature of multiple-attribute indexes (see the introduction to Section 17.4).
Multiple attributes are attributes that are not key attributes which means a search will have multiple records. 

Multiple-attribute indexes - In many retrieval/update requests, multiple attributes are involved. If a certain combination of attributes is used frequently, it's advantageous to set up a structure to provide efficient access by key value that is a combination of those attributes. 

To query for non-key attributes, give one of them an index to make querying for them faster. However this is still an inefficient technique if the number of records that meet the indexed condition are large, but only a few records satisfy a combined condition. 


c. Explain the nature of hash and bitmap indexes (see Sections 17.5.1–2).
The hash index is a secondary structure to access the file by using hashing on a search key other than the one used for the primary data file organization.

The bitmap index is another popular data structure that facilitates querying on multiple keys. Bitmap indexing is used for relations that contain a large number of rows. It creates an index for one or more columns, and each value or value range in those columns is indexed. 


d. Physical Database Design — Focus on the Section 17.7.
i. Explain the concept of physical database design (PDD).
Physical design is an activity where the goal is not only to create the appropriate structuring of data in storage, but also to do so in a way that guarantees good performance. 

ii. Compare and contrast the uses for B-tree, hash and bitmap indexes in PDD.
- RDBMS's use B+ trees for indexing in general
- b-tree indexes are best for high cardinality columns
- Hash indexes work well with equality conditions, particularly during joins to find a matching record(s), but they do not support range queries.
- Dynamic hashing is used often for files that are very volatile (grow and shrink continuously
- Bitmap index is advisable for systems in which data is not frequently updated by many concurrent systems. Good for low cardinality problems. Bitmap indexes are used to index files that are not as volatile.

iii. Explain whether denormalization should be considered a form of PDD.
I think denormalization should be considered a form of PDD. This is because a number of PDD factors will have to be considered when one is considering denormalizing a database design. 



2. Chapter 18
a. Explain the concept of query optimization (see the introduction to the chapter).
A query has many possible execution strategies, and the process of choosing a suitable one for processing a query is known as query optimization.



3. Oracle’s EXPLAIN PLAN
a. Load the small version of the Internet Movie DB defined in the repo (cs342/databases/imdb), configure the auto-trace facility in SQL*Plus (SET SERVEROUTPUT ON; & SET AUTOTRACE ON;) and generate an execuation plan for some simple query. What is the execution plan operation used and what does that operation do?

b. Explain at least the following operations (see Oracle Execution Plan Operations).

- TABLE ACCESS FULL
This is also known as full table scan. Reads the entire table—all rows and columns—as stored on the disk. Although multi-block read operations improve the speed of a full table scan considerably, it is still one of the most expensive operations. 

- TABLE ACCESS BY INDEX
Retrieves a row from the table using the ROWID retrieved from the preceding index lookup.

- NESTED LOOPS
Joins two tables by fetching the result from one table and querying the other table for each row from the first.

- HASH JOIN
The hash join loads the candidate records from one side of the join into a hash table that is then probed for each row from the other side of the join. 

- INDEX UNIQUE SCAN
The INDEX UNIQUE SCAN performs the B-tree traversal only. The database uses this operation if a unique constraint ensures that the search criteria will match no more than one entry. 

For Oracle’s reference documentation, see Database Performance Tuning Guide, particularly the “Using EXPLAIN PLAN” section. Note that the text also explains these operations conceptually in Chapter 18.